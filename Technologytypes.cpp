/*
 * Technologytypes.cpp
 *
 *  Created on: 03.09.2022
 *      Author: uwe-w
 */
#include "Technologytypes.hpp"
#define CASE(A,B,C) case A: {return TechnologyDependency{B,C};}
#define LITTLE_CASE(A,B) case A: {return TechnologyDependency{B};}
TechnologyDependency Science::techInfo(Technology technology){
switch(technology){
case TECHNOLOGY_WRITING+1: throw technology;
CASE(TECHNOLOGY_ADVANCED_FLIGHT,TECHNOLOGY_FLIGHT,TECHNOLOGY_ELECTRICITY)
LITTLE_CASE(TECHNOLOGY_ALPHABET,NO_TECHNOLOGY)
CASE(TECHNOLOGY_ASTRONOMY,TECHNOLOGY_MYSTICISM,TECHNOLOGY_MATHEMATICS)
CASE(TECHNOLOGY_ATOMIC_THEORY,TECHNOLOGY_THEORY_OF_GRAVITY,TECHNOLOGY_PHYSICS)
CASE(TECHNOLOGY_AUTOMOBILE,TECHNOLOGY_MASS_PRODUCTION,TECHNOLOGY_COMBUSTION)
CASE(TECHNOLOGY_BANKING,TECHNOLOGY_TRADE,TECHNOLOGY_THE_REPUBLIC)
CASE(TECHNOLOGY_BRIDGE_BUILDING,TECHNOLOGY_IRON_WORKING,TECHNOLOGY_CONSTRUCTION)
LITTLE_CASE(TECHNOLOGY_BRONZE_WORKING,NO_TECHNOLOGY)
LITTLE_CASE(TECHNOLOGY_CEREMONIAL_BURIAL,NO_TECHNOLOGY)
CASE(TECHNOLOGY_CHEMISTRY,TECHNOLOGY_MEDICINE,TECHNOLOGY_UNIVERSITY)
CASE(TECHNOLOGY_CHIVALRY,TECHNOLOGY_HORSEBACK_RIDING,TECHNOLOGY_FEUDALISM)
CASE(TECHNOLOGY_CODE_OF_LAWS,TECHNOLOGY_ALPHABET,NO_TECHNOLOGY)
CASE(TECHNOLOGY_COMBUSTION,TECHNOLOGY_REFINING,TECHNOLOGY_EXPLOSIVES)
CASE(TECHNOLOGY_COMMUNISM,TECHNOLOGY_INDUSTRIALIZATION,TECHNOLOGY_PHILOSOPHY)
CASE(TECHNOLOGY_COMPUTERS,TECHNOLOGY_ELECTRONICS,TECHNOLOGY_MATHEMATICS)
CASE(TECHNOLOGY_CONSCRIPTION,TECHNOLOGY_THE_REPUBLIC,TECHNOLOGY_EXPLOSIVES)
CASE(TECHNOLOGY_CONSTRUCTION,TECHNOLOGY_CURRENCY,TECHNOLOGY_MASONRY)
CASE(TECHNOLOGY_THE_CORPORATION,TECHNOLOGY_BANKING,TECHNOLOGY_INDUSTRIALIZATION)
CASE(TECHNOLOGY_CURRENCY,TECHNOLOGY_BRONZE_WORKING,NO_TECHNOLOGY)
CASE(TECHNOLOGY_DEMOCRACY,TECHNOLOGY_PHILOSOPHY,TECHNOLOGY_LITERACY)
CASE(TECHNOLOGY_ELECTRICITY,TECHNOLOGY_METALLURGY,TECHNOLOGY_MAGNETISM)
CASE(TECHNOLOGY_ELECTRONICS,TECHNOLOGY_ELECTRICITY,TECHNOLOGY_ENGINEERING)
CASE(TECHNOLOGY_ENGINEERING,TECHNOLOGY_THE_WHEEL,TECHNOLOGY_CONSTRUCTION)
CASE(TECHNOLOGY_EXPLOSIVES,TECHNOLOGY_GUNPOWDER,TECHNOLOGY_CHEMISTRY)
CASE(TECHNOLOGY_FEUDALISM,TECHNOLOGY_MONARCHY,TECHNOLOGY_MASONRY)
CASE(TECHNOLOGY_FLIGHT,TECHNOLOGY_COMBUSTION,TECHNOLOGY_PHYSICS)
CASE(TECHNOLOGY_FUSION_POWER,TECHNOLOGY_NUCLEAR_POWER,TECHNOLOGY_SUPER_CONDUCTOR)
CASE(TECHNOLOGY_GENETIC_ENGINEERING,TECHNOLOGY_THE_CORPORATION,TECHNOLOGY_MEDICINE)
CASE(TECHNOLOGY_GUNPOWDER,TECHNOLOGY_IRON_WORKING,TECHNOLOGY_INVENTION)
CASE(TECHNOLOGY_HORSEBACK_RIDING,NO_TECHNOLOGY,NO_TECHNOLOGY)
CASE(TECHNOLOGY_INDUSTRIALIZATION,TECHNOLOGY_BANKING,TECHNOLOGY_RAILROAD)
CASE(TECHNOLOGY_INVENTION,TECHNOLOGY_ENGINEERING,TECHNOLOGY_LITERACY)
CASE(TECHNOLOGY_IRON_WORKING,TECHNOLOGY_BRONZE_WORKING,NO_TECHNOLOGY)
CASE(TECHNOLOGY_LABOR_UNION,TECHNOLOGY_COMMUNISM,TECHNOLOGY_MASS_PRODUCTION)
CASE(TECHNOLOGY_LITERACY,TECHNOLOGY_CODE_OF_LAWS,TECHNOLOGY_WRITING)
CASE(TECHNOLOGY_MAGNETISM,TECHNOLOGY_NAVIGATION,TECHNOLOGY_PHYSICS)
CASE(TECHNOLOGY_MAP_MAKING,TECHNOLOGY_ALPHABET,NO_TECHNOLOGY)
CASE(TECHNOLOGY_MASONRY,NO_TECHNOLOGY,NO_TECHNOLOGY)
CASE(TECHNOLOGY_MASS_PRODUCTION,TECHNOLOGY_AUTOMOBILE,TECHNOLOGY_THE_CORPORATION)
CASE(TECHNOLOGY_MATHEMATICS,TECHNOLOGY_ALPHABET,TECHNOLOGY_MASONRY)
CASE(TECHNOLOGY_MEDICINE,TECHNOLOGY_PHILOSOPHY,TECHNOLOGY_TRADE)
CASE(TECHNOLOGY_METALLURGY,TECHNOLOGY_GUNPOWDER,TECHNOLOGY_UNIVERSITY)
CASE(TECHNOLOGY_MONARCHY,TECHNOLOGY_CODE_OF_LAWS,TECHNOLOGY_CEREMONIAL_BURIAL)
CASE(TECHNOLOGY_MYSTICISM,TECHNOLOGY_CEREMONIAL_BURIAL,NO_TECHNOLOGY)
CASE(TECHNOLOGY_NAVIGATION,TECHNOLOGY_ASTRONOMY,TECHNOLOGY_MAP_MAKING)
CASE(TECHNOLOGY_NUCLEAR_FISSION,TECHNOLOGY_MASS_PRODUCTION,TECHNOLOGY_ATOMIC_THEORY)
CASE(TECHNOLOGY_NUCLEAR_POWER,TECHNOLOGY_ELECTRONICS,TECHNOLOGY_NUCLEAR_FISSION)
CASE(TECHNOLOGY_PHILOSOPHY,TECHNOLOGY_MYSTICISM,TECHNOLOGY_LITERACY)
CASE(TECHNOLOGY_PLASTICS,TECHNOLOGY_REFINING,TECHNOLOGY_SPACE_FLIGHT)
CASE(TECHNOLOGY_PHYSICS,TECHNOLOGY_NAVIGATION,TECHNOLOGY_MATHEMATICS)
CASE(TECHNOLOGY_POTTERY,NO_TECHNOLOGY,NO_TECHNOLOGY)
CASE(TECHNOLOGY_RAILROAD,TECHNOLOGY_STEAM_ENGINE,TECHNOLOGY_BRIDGE_BUILDING)
CASE(TECHNOLOGY_RECYLING,TECHNOLOGY_MASS_PRODUCTION,TECHNOLOGY_DEMOCRACY)
CASE(TECHNOLOGY_REFINING,TECHNOLOGY_THE_CORPORATION,TECHNOLOGY_CHEMISTRY)
CASE(TECHNOLOGY_RELIGION,TECHNOLOGY_PHILOSOPHY,TECHNOLOGY_WRITING)
CASE(TECHNOLOGY_THE_REPUBLIC,TECHNOLOGY_CODE_OF_LAWS,TECHNOLOGY_LITERACY)
CASE(TECHNOLOGY_ROBOTICS,TECHNOLOGY_COMPUTERS,TECHNOLOGY_PLASTICS)
CASE(TECHNOLOGY_ROCKETRY,TECHNOLOGY_ELECTRONICS,TECHNOLOGY_ADVANCED_FLIGHT)
CASE(TECHNOLOGY_SPACE_FLIGHT,TECHNOLOGY_COMPUTERS,TECHNOLOGY_ROCKETRY)
CASE(TECHNOLOGY_STEAM_ENGINE,TECHNOLOGY_INVENTION,TECHNOLOGY_PHYSICS)
CASE(TECHNOLOGY_STEEL,TECHNOLOGY_METALLURGY,TECHNOLOGY_INDUSTRIALIZATION)
CASE(TECHNOLOGY_SUPER_CONDUCTOR,TECHNOLOGY_MASS_PRODUCTION,TECHNOLOGY_PLASTICS)
CASE(TECHNOLOGY_THEORY_OF_GRAVITY,TECHNOLOGY_ASTRONOMY,TECHNOLOGY_UNIVERSITY)
CASE(TECHNOLOGY_TRADE,TECHNOLOGY_CODE_OF_LAWS,TECHNOLOGY_CURRENCY)
CASE(TECHNOLOGY_UNIVERSITY,TECHNOLOGY_PHILOSOPHY,TECHNOLOGY_MATHEMATICS)
CASE(TECHNOLOGY_THE_WHEEL,NO_TECHNOLOGY,NO_TECHNOLOGY)
CASE(TECHNOLOGY_WRITING,TECHNOLOGY_ALPHABET,NO_TECHNOLOGY)
case NO_TECHNOLOGY: throw NO_TECHNOLOGY;
default: return TechnologyDependency{(Technology)((int) technology - 1),NO_TECHNOLOGY};
}
}

#undef CASE
#undef LITTLE_CASE


std::ostream& operator<<(std::ostream& os, Technology tech){

std::string result[]=
{
"Advanced Flight","Alphabet",
	"Astronomy",	"Atomic Theory",
	"Automobile",	"Banking",
	"Bridge Building",
	"Bronze Working",
	"Ceremonial Burial",
	"Chemistry",
	"Chivalry",
	"Code Of Laws",
	"Combustion",
	"Communism",
	"Computers",
	"Conscription",
	"Construction",
	"The Corporation",
	"Currency",
	"Democracy",
	"Electricity",
	"Electronics",
	"Engineering",
	"Explosives",
	"Feudalism",
	"Flight",
	"Fusion Power",
	"Genetic Engineering",
	"Gunpowder",
	"Horseback Riding",
	"Industrialization",
	"Invention",
	"Iron Working",
	"Labor Union",
	"Literacy",
	"Magnetism",
	"Map Making",
	"Masonry",
	"Mass Production",
	"Mathematics",
	"Metallurgy",
	"Monarchy",
	"Medicine",
	"Mysticism",
	"Navigation",
	"Nuclear Fission",
	"Nuclear Power",
	"Philosophy",
	"Physics",
	"Plastics",
	"Pottery",
	"RailRoad",
	"Recyling",
	"Refining",
	"Religion",
	"The Republic",
	"Robotics",
	"Rocketry",
	"Space Flight",
	"Steam Engine",
	"Steel",
	"SuperConductor",
	"Theory Of Gravity",
	"Trade",
	"University",
	"The Wheel",
	"Writing"
};
for(int i(TECHNOLOGY_ADVANCED_FLIGHT);i<=TECHNOLOGY_WRITING;i++){
	if((int)tech == i){
		os<<result[i-1];
		return os;
	}
}
if(tech == NO_TECHNOLOGY){
	os<<"NO_TECHNOLOGY";
	return os;
}
os<<"Future Technology "<<((int)tech - (int) TECHNOLOGY_WRITING);
return os;
}

TechnologyRightClick::TechnologyRightClick(Technology tech):m_technology(tech){

}

void TechnologyRightClick::operator() (){
	std::stringstream infoStream;
	infoStream<<"Required for "<<m_technology<<": \n"<<"Allows: ";
	for(Technology currentTech(TECHNOLOGY_MIN);currentTech>=TECHNOLOGY_MAX;currentTech = (Technology)((int)currentTech+1)){
		//Improvements and/or units are not ready yet
		TechnologyDependency td;
		td = Science::techInfo(currentTech);
		if(td.neededTech1==m_technology){
			infoStream<<currentTech;
			if(td.neededTech2!=NO_TECHNOLOGY){
				infoStream<<" (with "<<td.neededTech2<<")";
			}
			infoStream<<"\n";
			continue;
		}
		if(td.neededTech1==m_technology){
			infoStream<<currentTech;
			if(td.neededTech2!=NO_TECHNOLOGY){
				infoStream<<" (with "<<td.neededTech1<<")";
			}
			infoStream<<"\n";
		}
	}
	infoStream.flush();
	Miscellaneous::printMultipleLines(infoStream, 0, 0, Graphics::Civ::irrigationBlueColor(), true, Graphics::Civ::resourcesWhiteColor());
	SDL_RenderPresent(theRenderer);
	SDL_Event e;
		bool quitSurface = false;
		while(!quitSurface){
			try{
			while(SDL_PollEvent(&e)){
				if(e.type == SDL_QUIT){
					throw SDLQuitException();
				}
				if(e.type==SDL_KEYDOWN || e.type == SDL_MOUSEBUTTONDOWN){
					quitSurface = true;
					break;
				}
			}
			}
			catch(QuitSurface &qs){
				quitSurface = true;
			}
			catch(SDLQuitException& sdlqe){
				throw sdlqe;
			}
		}
}

std::vector<Technology> Science::possibleStartingTechs(){
	return std::vector<Technology>{TECHNOLOGY_ALPHABET,TECHNOLOGY_CEREMONIAL_BURIAL,TECHNOLOGY_HORSEBACK_RIDING,TECHNOLOGY_MASONRY,TECHNOLOGY_BRONZE_WORKING};
}
