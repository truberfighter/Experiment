/*
 * Technologytypes.hpp
 *
 *  Created on: 03.09.2022
 *      Author: uwe-w
 */

#ifndef TECHNOLOGYTYPES_HPP_
#define TECHNOLOGYTYPES_HPP_

#include "sdltypes.hpp"
#include <functional>

enum Technology{
	TECHNOLOGY_ADVANCED_FLIGHT = 1,
	TECHNOLOGY_ALPHABET,
	TECHNOLOGY_ASTRONOMY,
	TECHNOLOGY_ATOMIC_THEORY,
	TECHNOLOGY_AUTOMOBILE,
	TECHNOLOGY_BANKING,
	TECHNOLOGY_BRIDGE_BUILDING,
	TECHNOLOGY_BRONZE_WORKING,
	TECHNOLOGY_CEREMONIAL_BURIAL,
	TECHNOLOGY_CHEMISTRY,
	TECHNOLOGY_CHIVALRY,
	TECHNOLOGY_CODE_OF_LAWS,
	TECHNOLOGY_COMBUSTION,
	TECHNOLOGY_COMMUNISM,
	TECHNOLOGY_COMPUTERS,
	TECHNOLOGY_CONSCRIPTION,
	TECHNOLOGY_CONSTRUCTION,
	TECHNOLOGY_THE_CORPORATION,
	TECHNOLOGY_CURRENCY,
	TECHNOLOGY_DEMOCRACY,
	TECHNOLOGY_ELECTRICITY,
	TECHNOLOGY_ELECTRONICS,
	TECHNOLOGY_ENGINEERING,
	TECHNOLOGY_EXPLOSIVES,
	TECHNOLOGY_FEUDALISM,
	TECHNOLOGY_FLIGHT,
	TECHNOLOGY_FUSION_POWER,
	TECHNOLOGY_GENETIC_ENGINEERING,
	TECHNOLOGY_GUNPOWDER,
	TECHNOLOGY_HORSEBACK_RIDING,
	TECHNOLOGY_INDUSTRIALIZATION,
	TECHNOLOGY_INVENTION,
	TECHNOLOGY_IRON_WORKING,
	TECHNOLOGY_LABOR_UNION,
	TECHNOLOGY_LITERACY,
	TECHNOLOGY_MAGNETISM,
	TECHNOLOGY_MAP_MAKING,
	TECHNOLOGY_MASONRY,
	TECHNOLOGY_MASS_PRODUCTION,
	TECHNOLOGY_MATHEMATICS,
	TECHNOLOGY_METALLURGY,
	TECHNOLOGY_MONARCHY,
	TECHNOLOGY_MEDICINE,
	TECHNOLOGY_MYSTICISM,
	TECHNOLOGY_NAVIGATION,
	TECHNOLOGY_NUCLEAR_FISSION,
	TECHNOLOGY_NUCLEAR_POWER,
	TECHNOLOGY_PHILOSOPHY,
	TECHNOLOGY_PHYSICS,
	TECHNOLOGY_PLASTICS,
	TECHNOLOGY_POTTERY,
	TECHNOLOGY_RAILROAD,
	TECHNOLOGY_RECYLING,
	TECHNOLOGY_REFINING,
	TECHNOLOGY_RELIGION,
	TECHNOLOGY_THE_REPUBLIC,
	TECHNOLOGY_ROBOTICS,
	TECHNOLOGY_ROCKETRY,
	TECHNOLOGY_SPACE_FLIGHT,
	TECHNOLOGY_STEAM_ENGINE,
	TECHNOLOGY_STEEL,
	TECHNOLOGY_SUPER_CONDUCTOR,
	TECHNOLOGY_THEORY_OF_GRAVITY,
	TECHNOLOGY_TRADE,
	TECHNOLOGY_UNIVERSITY,
	TECHNOLOGY_THE_WHEEL,
	TECHNOLOGY_WRITING,
	NO_TECHNOLOGY = -1,
	TECHNOLOGY_MAX = TECHNOLOGY_WRITING,
	TECHNOLOGY_MIN = TECHNOLOGY_ADVANCED_FLIGHT
};

class TechnologyRightClick: public std::function<void()>{
public:
	Technology m_technology;
	void operator()();
	TechnologyRightClick(Technology tech);
};

struct TechnologyDependency{
	Technology neededTech1;
	Technology neededTech2 = NO_TECHNOLOGY;
	Technology techMakingObsolete1 = NO_TECHNOLOGY;
	Technology techMakingObsolete2 = NO_TECHNOLOGY;
};
std::ostream& operator<<(std::ostream& os, Technology tech);

namespace Science{
	TechnologyDependency techInfo(ImprovementType imptype);
	TechnologyDependency techInfo(Technology technology);
	std::vector<Technology> possibleStartingTechs();
}

#endif /* TECHNOLOGYTYPES_HPP_ */
